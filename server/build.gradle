import java.text.DateFormat
import java.text.SimpleDateFormat

plugins {
    id "net.ltgt.apt" version "0.20"
    id "com.diffplug.gradle.spotless" version "3.24.1"
    id "com.google.protobuf" version "0.8.10"
    id "java"
    id "idea"
    id "com.google.cloud.tools.jib" version "1.4.0"
    id 'maven-publish'
}

repositories {
    mavenLocal()
    jcenter()
}

dependencies {
    compile(project(":proto"))
    compile(project(":core"))
    compile("com.google.protobuf:protobuf-java:${versions.protobuf}")
    compile("io.grpc:grpc-stub:${versions.grpc}")
    compile("io.grpc:grpc-protobuf:${versions.grpc}")
    runtime("io.grpc:grpc-netty-shaded:${versions.grpc}")
    compile("io.grpc:grpc-services:${versions.grpc}")
    compile("net.sourceforge.argparse4j:argparse4j:0.8.1")
    compile("com.google.cloud:google-cloud-storage:${versions.gcp}")
    compile("com.google.cloud:google-cloud-pubsub:${versions.gcp}")
    compile("com.google.cloud:google-cloud-datacatalog:0.16.0-alpha")

    compile("io.opencensus:opencensus-api:${versions.opencensus}")
    runtime("io.opencensus:opencensus-impl:${versions.opencensus}")
    runtime("io.opencensus:opencensus-contrib-grpc-metrics:${versions.opencensus}")
    runtime("io.opencensus:opencensus-exporter-trace-stackdriver:${versions.opencensus}")

    compile("commons-io:commons-io:2.6")

    testImplementation("junit:junit:4.12")
    testCompile("com.github.stefanbirkner:system-rules:1.19.0")
    testCompile("io.grpc:grpc-testing:${versions.grpc}")
}

protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:${versions.protobuf}"
    }
    plugins {
        grpc {
            artifact = "io.grpc:protoc-gen-grpc-java:" + versions.grpc
        }
    }
    
    generateProtoTasks {
        ofSourceSet('main').each {
            task ->
                task.plugins {
                    grpc {
                    }
                }

        }
        ofSourceSet("test")
    }
}

spotless {
    java {
        googleJavaFormat('1.7')
        target project.fileTree(project.projectDir) {
            include "**/*.java"
            exclude "build/**/*.java"
        }
    }
}

//jib {
//    from {
//        image = containerRepoBase + '/distroless/java-gcloud'
//    }
//    to {
//        image = containerRepoTarget + '/metaserver'
//    }
//    container {
//        mainClass = 'io.anemos.metastore.MetaStoreServer'
//        jvmFlags = ['-agentpath:/opt/cprof/profiler_java_agent.so=-cprof_service=metaserver',
//                    '-agentpath:/opt/cdbg/cdbg_java_agent.so',
//                    '-Dcom.google.cdbg.auth.serviceaccount.enable=true',
//                    '-Dcom.google.cdbg.module=metaserver',
//                    '-Dcom.google.cdbg.version=v2019.3.1.1250' ]
//        volumes = ['/var/run/secrets/google']
//    }
//}
jib {
    from {
        image = containerRepoBase + '/distroless/java-protoc'
    }
    to {
        image = containerRepoTarget + '/metastore'
    }
    container {
        mainClass = 'io.anemos.metastore.MetaStoreServer'
    }
}

tasks.withType(Test) {
    environment 'TEST_GOOGLE_CLOUD',testGoogleCloud
    environment 'TEST_GOOGLE_CLOUD_PROJECT',testGoogleCloudProject
    environment 'TEST_GOOGLE_CLOUD_BUCKET',testGoogleCloudBucket
    environment 'TEST_GOOGLE_CLOUD_BUCKET_PATH',testGoogleCloudBucketPath
}


processResources {
    doFirst {
        File file = new File("$sourceSets.main.output.resourcesDir/io/anemos/metastore/version.properties");
        System.out.println(file);
        file.getParentFile().mkdirs();
        file.withWriter { w ->
            Properties p = new Properties()
            p['version'] = project.version.toString()
            DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
            Date date = new Date();
            p['build'] = dateFormat.format(date)
            p.store w, null
        }
    }
}

publishing {
    repositories {
        maven {
            // change to point to your repo, e.g. http://my.org/repo
            if (project.version.endsWith('-SNAPSHOT')) {
                url = uri(snapshotRepoUrl)
            } else {
                url = uri(repoUrl)
            }
            if (project.hasProperty('repoUser') && project.hasProperty('repoPass')) {
                credentials {
                    username repoUser
                    password repoPass
                }
            }
        }
    }
    publications {
        maven(MavenPublication) {
            groupId 'io.anemos'
            artifactId 'metastore-server'
            from components.java
        }
    }
}

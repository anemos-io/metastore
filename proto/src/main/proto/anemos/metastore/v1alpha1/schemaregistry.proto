syntax = "proto3";

import "anemos/metastore/v1alpha1/report.proto";
import "google/protobuf/timestamp.proto";

option java_package = "io.anemos.metastore.v1alpha1";

package anemos.metastore.v1alpha1;

service SchemaRegistyService {
    rpc SubmitSchema (SubmitSchemaRequest) returns (SubmitSchemaResponse);
    rpc VerifySchema (SubmitSchemaRequest) returns (SubmitSchemaResponse);
    rpc GetSchema (GetSchemaRequest) returns (GetSchemaResponse);

    rpc AssignSchemaToResource (AssignSchemaToResourceRequest) returns (AssignSchemaToResourceResponse);
    rpc GetSchemaForResource (GetSchemaForResourceRequest) returns (GetSchemaForResourceResponse);
    rpc UseSchemaOnResource (UseSchemaOnResourceRequest) returns (UseSchemaOnResourceResponse);
}

message Scope {
    string scope_name = 1;
    oneof package_scope {
        string package_name = 2;
        string package_prefix = 3;
    }
    oneof entity_scope {
        string message_name = 4;
        string enum_name = 5;
        string service_name = 6;
        string file_name = 7;
    }
    bool transitive = 8;
}

message SubmitSchemaRequest {

    // Represents the schema registry names. If a schema registry doesn't support multiple
    // registries this field is ignored. The default value represents the default registry.
    string registry_name = 1;

    // These are proto2 type google.protobuf.FileDescriptorProto, but
    // we avoid taking a dependency on descriptor.proto, which uses
    // proto2 only features, by making them opaque
    // bytes instead
    bytes fd_proto_set = 2;
    repeated Scope scope = 3;
}

message SubmitSchemaResponse {
    string schema_profile = 1;
    Report report = 2;
    int32 error_code = 3;
}

message GetSchemaRequest {
    // Represents the schema registry names. If a schema registry doesn't support multiple
    // registries this field is ignored. The default value represents the default registry.
    string registry_name = 1;
    repeated Scope scope = 2;
}

message GetSchemaResponse {
    // These are proto2 type google.protobuf.FileDescriptorProto, but
    // we avoid taking a dependency on descriptor.proto, which uses
    // proto2 only features, by making them opaque
    // bytes instead
    bytes fd_proto_set = 1;
    int32 error_code = 2;
}

message AssignSchemaToResourceRequest {
    string registry_name = 1;
    string resource_name = 2;
    string package_name = 3;
    string message_name = 4;
}
message AssignSchemaToResourceResponse {
}

message GetSchemaForResourceRequest {
    string registry_name = 1;
    string resource_name = 2;
}

message GetSchemaForResourceResponse {
    // These are proto2 type google.protobuf.FileDescriptorProto, but
    // we avoid taking a dependency on descriptor.proto, which uses
    // proto2 only features, by making them opaque
    // bytes instead
    string package_name = 1;
    string message_name = 2;
    bytes fd_proto_set = 3;

}

message UseSchemaOnResourceRequest {
    enum Purpose {
        PURPOSE_UNSET = 0;
        PURPOSE_PRODUCER = 1;
        PURPOSE_CONSUMER = 2;
        PURPOSE_API_SERVER = 3;
        PURPOSE_API_CLIENT = 4;
    }

    message Metrics {
        int64 data_bytes = 2;
        int64 data_messages = 3;
        int64 data_errors = 4;
        int64 data_warnings = 5;
    }

    message Usage {
        string usage_name = 1;
        string resource_name = 2;
        string package_name = 3;
        string message_name = 4;

        Purpose purpose = 5;
        google.protobuf.Timestamp since = 6;
        Metrics metrics = 7;
    }

    string registry_name = 2;
    string component_instance = 4;
    map<string, string> component_labels = 5;


    // These are proto2 type google.protobuf.FileDescriptorProto, but
    // we avoid taking a dependency on descriptor.proto, which uses
    // proto2 only features, by making them opaque
    // bytes instead
    bytes fd_proto_set = 6;

    repeated Usage usage = 7;
}

message UseSchemaOnResourceResponse {
}
